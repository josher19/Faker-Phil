// Generated by CoffeeScript 1.12.7
var Expect, Phil, Range, assert, count_words, expect, expect_element, find_children, find_elements;

Phil = require('../Phil');

assert = require('assert');

if (typeof expect !== "function") {
  expect = function(value) {
    return new Expect(value);
  };
  Expect = function(value1) {
    this.value = value1;
  };
  Expect.prototype.toEqual = function(that, msg) {
    return assert.strictEqual(this.value, that, msg);
  };
  Expect.prototype.toCover = function(that) {
    var ref;
    return assert(this.value.indexOf(that) > -1, (((ref = this.value) != null ? ref.length : void 0) || JSON.stringify(this.value)) + " does not cover " + that);
  };
  Expect.prototype.toMatch = function(pat) {
    return assert(this.value.match(pat) !== null, this.value + " does not match " + pat);
  };
  Expect.prototype.toStartWith = function(pat) {
    return assert.strictEqual(this.value.indexOf(pat), 0, this.value + " does not start with " + pat);
  };
  Expect.prototype.toBeA = function(clazz) {
    var ref;
    return assert.strictEqual((ref = this.value) != null ? ref.constructor : void 0, clazz, this.value + " not of class " + clazz);
  };
  Phil.expect = expect;
}

Range = (function() {
  function Range(low, high) {
    this.low = low;
    this.high = high;
    this;
  }

  return Range;

})();

Range.prototype.indexOf = function(val) {
  if (this.low <= val && val <= this.high) {
    return 1;
  } else {
    return -1;
  }
};

find_children = find_elements = function(content, tag) {
  return content.replace(/\n/g, " ").match(RegExp("<" + tag + ">(.+?)</" + tag + ">", "gi")) || [];
};

expect_element = function(content, tag) {
  var ref;
  expect(content.indexOf("<" + tag + ">")).toEqual(0, content);
  return expect((ref = content.match(RegExp("<\/" + tag + ">$"))) != null ? ref.length : void 0).toEqual(1, content);
};

count_words = function(content) {
  if (typeof content === "string") {
    return content.split(' ').length;
  } else {
    return content.nodes[0].split(' ').length;
  }
};

if (typeof module !== "undefined" && module !== null) {
  module.exports = {
    find_children: find_children,
    expect_element: expect_element,
    expect: expect,
    count_words: count_words,
    Range: Range
  };
}
