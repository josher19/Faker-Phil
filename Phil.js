// Generated by CoffeeScript 1.7.1
var Faker, Phil, build_tag, build_tags, format_image_argument_output, html_safe, parse_image_arguments, pick, rand, tag,
  __hasProp = {}.hasOwnProperty;

if (typeof require === "function") {
  Faker = require('Faker');
  require.again = function(lastmod) {
    this.lastmod = lastmod != null ? lastmod : this.lastmod;
    require.cache[require.resolve(this.lastmod)] = null;
    return require(this.lastmod);
  };
}

html_safe = function(s) {
  return String(s).replace(/&/g, "&amp;").replace(/</g, '&lt;').replace(/>/g, '&gt;');
};

parse_image_arguments = function(obj) {
  var arg, argu, k, output, v, _i, _len;
  output = {};
  if (obj && typeof obj === "object") {
    for (k in obj) {
      if (!__hasProp.call(obj, k)) continue;
      v = obj[k];
      output[k] = v;
    }
  }
  for (_i = 0, _len = arguments.length; _i < _len; _i++) {
    argu = arguments[_i];
    arg = argu.toString();
    switch (false) {
      case !arg.match(/^(#[a-f\d]{3,6}(\/(?=#))?){1,2}$/):
        output['color'] = arg;
        break;
      case !arg.match(/^([\d\.]*)x?([\d\.]*?)$/):
        output['size'] = arg;
        break;
      default:
        if (obj !== argu) {
          output['text'] = arg;
        }
    }
  }
  return output;
};

format_image_argument_output = function(args) {
  var k, v;
  if (!args['color']) {
    args['color'] = "" + (args['background'] || '') + (args['foreground'] || '');
  }
  if (args['width'] && args['height']) {
    args['size'] = "" + (Phil.pick(args['width'])) + "x" + (Phil.pick(args['height']));
  }
  for (k in args) {
    v = args[k];
    switch (k) {
      case "color":
        args[k] = v.replace(/\/?#/g, '/');
        break;
      case "text":
        args['text'] = "&text=" + (v.replace(/[^\d\w\!,\.;:-]+/g, '+').replace(/\+?$/g, ''));
    }
  }
  return args;
};

rand = function(n) {
  if (n == null) {
    n = 1.0;
  }
  return Math.floor(Math.random() * n);
};

Phil = (function() {
  function Phil() {}

  return Phil;

})();

pick = Phil.pick = function(num) {
  if (num.length && !num.charCodeAt) {
    return num[Math.floor(Math.random() * num.length)];
  }
  return num;
};

Phil.loop = function(num, fn) {
  var i, _i, _ref;
  for (i = _i = 0, _ref = pick(num) - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
    fn(i);
  }
  return i;
};


/** Private */

build_tags = function(name, content, elements) {
  var content_method, times, x;
  if (elements == null) {
    elements = 1;
  }
  content_method = typeof content === "function" ? content : function() {
    return Phil.words(content);
  };
  times = pick(elements);
  return ((function() {
    var _i, _results;
    _results = [];
    for (x = _i = 1; 1 <= times ? _i <= times : _i >= times; x = 1 <= times ? ++_i : --_i) {
      _results.push(build_tag(name, content_method));
    }
    return _results;
  })()).join('');
};

build_tag = function(name, content) {
  return "<" + name + ">" + ((typeof content === "function" ? content() : void 0) || content) + "</" + name + ">";
};

tag = function(name, content, children) {
  switch (name) {
    case "ul":
    case "ol":
      content || (content = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);
      children || (children = [3, 4, 5, 6, 7, 8, 9, 10]);
      return build_tag(name, build_tags("li", content, children));
    case "blockquote":
      content || (content = [1, 2, 3]);
      return build_tag(name, Phil.paragraphs(content));
    case "p":
      return Phil.paragraphs(1);
    default:
      content || (content = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);
      return build_tags(name, content);
  }
};

Phil.image = function() {
  var opts;
  opts = format_image_argument_output(parse_image_arguments.apply(Phil, arguments));
  return opts['size'] && ("http://placehold.it/" + opts['size'] + (opts['color'] || '') + (opts['text'] || ''));
};

Phil.words = function(num) {
  return html_safe(Faker.Lorem.words(Phil.pick(num)).join(' '));
};

Phil.paragraphs = function(num) {
  var content_method;
  content_method = function() {
    return Faker.Lorem.paragraphs(1);
  };
  return build_tags("p", content_method, pick(num));
};

Phil.blockquote = function(paragraphs) {
  return tag("blockquote", paragraphs);
};

Phil.ul = function(list_items, item_length) {
  return tag("ul", item_length, list_items);
};

Phil.ol = function(list_items, item_length) {
  return tag("ol", item_length, list_items);
};

Phil.link_list = function(list_items, item_length) {
  if (list_items == null) {
    list_items = [3, 4, 5, 6, 7, 8, 9, 10];
  }
  if (item_length == null) {
    item_length = [1, 2, 3, 4, 5];
  }
  return build_tag("ul", build_tags("li", (function() {
    return "<a href='#'>" + (Phil.words(item_length)) + "</a>";
  }), list_items));
};

Phil.markup = function(pattern) {
  if (pattern == null) {
    pattern = "h1 p p h2 p ol h2 p ul";
  }
  return pattern.split(" ").map(function(t) {
    return tag(t);
  }).join('');
};

Phil.currency = function(num, symbol) {
  var val;
  if (symbol == null) {
    symbol = "$";
  }
  val = ((pick(num) * 100) / 100).toFixed(2);
  return symbol + val;
};

Phil.number = function(len) {
  var _i, _results;
  return (function() {
    _results = [];
    for (var _i = 1; 1 <= len ? _i <= len : _i >= len; 1 <= len ? _i++ : _i--){ _results.push(_i); }
    return _results;
  }).apply(this).map(function() {
    return rand(10);
  }).join('');
};

Phil.phone = function(format) {
  if (format == null) {
    format = "(###) ###-####";
  }
  return format.replace(/#/g, function() {
    return rand(9) + 1;
  });
};

Phil.date = function(day_window) {
  var t;
  t = (typeof Date.now === "function" ? Date.now() : void 0) || new Date().getTime();
  return new Date(day_window ? t - rand(day_window) * 86400000 : rand(t));
};

Phil.city = function() {
  return Faker.Address.city();
};

Phil.domainName = function() {
  return Faker.Internet.domainName();
};

Phil.email = function() {
  return Faker.Internet.email();
};

Phil.firstName = function() {
  return Faker.Name.firstName();
};

Phil.lastName = function() {
  return Faker.Name.lastName();
};

Phil.name = function() {
  return Faker.Name.name();
};

Phil.state = function() {
  return Faker.Address.usState();
};

Phil.state_abbr = function() {
  return Faker.random.us_state_abbr();
};

Phil.body_content = Phil.markup;

Phil.sometimes = function(num_or_content, num) {
  var fn, _i, _j, _results, _results1;
  if (num_or_content == null) {
    num_or_content = 3;
  }
  if (num == null) {
    num = 3;
  }
  fn = arguments[arguments.length - 1];
  if (typeof fn === "function") {
    if (typeof num_or_content === "function") {
      num_or_content = 3;
    }
    if (typeof num === "function") {
      num = 3;
    }
    if (num_or_content === Phil.pick((function() {
      _results = [];
      for (var _i = 1; 1 <= num_or_content ? _i <= num_or_content : _i >= num_or_content; 1 <= num_or_content ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this))) {
      return fn(num_or_content, num);
    }
  } else {
    if (num === Phil.pick((function() {
      _results1 = [];
      for (var _j = 1; 1 <= num ? _j <= num : _j >= num; 1 <= num ? _j++ : _j--){ _results1.push(_j); }
      return _results1;
    }).apply(this))) {
      return num_or_content;
    }
  }
};

if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
  module.exports = Phil;
}

Phil.again = function(lastmod) {
  this.lastmod = lastmod;
  require.cache[require.resolve(this.lastmod)] = null;
  return require(this.lastmod);
};
